orders <- read_excel("Online_Retail.xlsx", n_max = 20000)
setwd("~/GitHub/clp_data_analytic/association_rules")
# Load the data
orders <- read_excel("Online_Retail.xlsx", n_max = 20000)
# Load the data
orders <- read_excel("Online_Retail.xlsx", n_max = 20000)
# Load the data
orders <- read_xlsx("Online_Retail.xlsx", n_max = 20000)
pwd
# Load the data
orders <- read_xlsx("Online_Retail.xlsx", n_max = 20000)
# Load the data
orders <- read_excel("Online_Retail.xlsx", n_max = 20000)
# Load the data
orders <- read.csv("instacart/products.csv")
# Load the data
orders <- read.csv("instacart/products.csv")
# Load the data
orders <- read.csv("products.csv")
# Load the data
orders <- read_excel("Online_Retail.xlsx")
# Load the data
orders <- read_excel("Home/GitHub/clp_data_analytic/association_rules/Online_Retail.xlsx", n_max = 20000)
# Load the data
orders <- read_excel("~/GitHub/clp_data_analytic/association_rules/Online_Retail.xlsx", n_max = 20000)
# Check the structure
glimpse(orders)
# Inspect first few rows
head(orders)
# Join the data on product_id
df <- orders %>%
group_by(InvoiceNo) %>%
summarise(basket = as.vector(list(Description)))
head(df)
df_tr <- as(df$basket, "transactions")
df_tr <- as(df$basket, "transactions")
df_tr
inspect(head(df_tr))
itemFrequencyPlot(df_tr, topN=10, type="absolute")
# Display the distribution of number of items per basket
hist(size(df_tr), breaks = 0:80, xaxt = "n",
main = "Number of Items per Basket", xlab = "Number of Items", col = "#00ADB5")
# Display the distribution of number of items per basket
hist(size(df_tr), breaks = 0:200, xaxt = "n",
main = "Number of Items per Basket", xlab = "Number of Items", col = "#00ADB5")
# Display the distribution of number of items per basket
hist(size(df_tr), breaks = 0:2000, xaxt = "n",
main = "Number of Items per Basket", xlab = "Number of Items", col = "#00ADB5")
axis(side = 1, at = seq(0, 2000, by = 10), cex.axis = 0.8) # set x-axis label
mtext(paste("Total Baskets: ", length(df_tr)), line = -1) # set sub-title
# Display the distribution of number of items per basket
hist(size(df_tr), breaks = 0:1000, xaxt = "n",
main = "Number of Items per Basket", xlab = "Number of Items", col = "#00ADB5")
axis(side = 1, at = seq(0, 1000, by = 10), cex.axis = 0.8) # set x-axis label
mtext(paste("Total Baskets: ", length(df_tr)), line = -1) # set sub-title
itemFrequencyPlot(df_tr, topN = 15, type = "absolute", col = "#00ADB5",
main = "Top 15 Most Frequent Items")
# Support and confidence values
support_levels <- c(0.01, 0.008, 0.006, 0.004)
confidence_levels <- seq(0.9, 0.1, by = -0.1)
# Create empty integers for each support level
for(i in support_levels) {
rules_count <- integer(length = length(confidence_levels))
for(j in 1:length(confidence_levels)) {
rules_count[j] <- length(apriori(df_tr, parameter = list(support=i, confidence=confidence_levels[j], target = "rules", minlen = 2)))
}
nam <- paste("rules_supp_", i, sep = "")
assign(nam, rules_count)
}
summary(orders)
complete.cases(orders)
summary(orders)
# Load packages
library(dplyr)
library(arules)
library(arulesViz)
library(tidyverse)
library(readxl)
library(stringr)
orders %>% orders[complete.cases(orders), ]
orders %>% orders[complete.cases(orders), ]
# Load the data
orders <- read_excel("~/GitHub/clp_data_analytic/association_rules/Online_Retail.xlsx", n_max = 20000)
summary(orders)
# Check the structure
glimpse(orders)
# Inspect first few rows
head(orders)
orders %>% orders[complete.cases(orders), ]
orders %>% orders[complete.cases(orders)]
orders %>% orders[complete.cases(orders), ]
orders %>% na.omit(orders)
orders %>% mutate(Description = as.factor(Description)) %>%
mutate(Description = str_to_title(Description))
head(df)
head(orders)
orders <- na.omit(orders)
orders <- orders %>% mutate(Description = as.factor(Description)) %>%
mutate(Description = str_to_title(Description))
head(orders)
orders <- na.omit(orders)
orders <- orders %>% mutate(Description = str_to_title(Description))
%>% mutate(Description = as.factor(Description))
orders <- na.omit(orders)
orders <- orders %>% mutate(Description = str_to_title(Description)) %>%
mutate(Description = as.factor(Description))
head(orders)
# Load the data
orders <- read_excel("~/GitHub/clp_data_analytic/association_rules/Online_Retail.xlsx", n_max = 20000)
summary(orders)
# Check the structure
glimpse(orders)
# Inspect first few rows
head(orders)
orders <- na.omit(orders)
orders <- orders %>% mutate(Description = str_to_title(Description)) %>%
mutate(Description = as.factor(Description)) %>%
mutate(InvoiceNo = as.numeric(InvoiceNo)) %>%
mutate(Country = as.factor(Country))
head(orders)
sum(is.na(orders))
head(orders)
# Load the data
orders <- read_excel("~/GitHub/clp_data_analytic/association_rules/Online_Retail.xlsx", n_max = 20000)
summary(orders)
orders <- na.omit(orders)
orders <- orders %>% mutate(Description = str_to_title(Description)) %>%
mutate(Description = as.factor(Description)) %>%
mutate(InvoiceNo = as.numeric(InvoiceNo))
# Load the data
orders <- read_excel("~/GitHub/clp_data_analytic/association_rules/Online_Retail.xlsx", n_max = 50000)
summary(orders)
# Check the structure
glimpse(orders)
orders <- na.omit(orders)
orders <- orders %>% mutate(Description = str_to_title(Description)) %>%
mutate(Description = as.factor(Description)) %>%
orders <- na.omit(orders)
orders <- orders %>% mutate(Description = str_to_title(Description)) %>%
mutate(Description = as.factor(Description))
sum(is.na(orders))
head(orders)
# Join the data on product_id
df <- orders %>%
group_by(InvoiceNo) %>%
summarise(basket = as.vector(list(Description)))
head(df)
df_tr <- as(df$basket, "transactions")
df_tr
inspect(head(df_tr))
itemFrequencyPlot(df_tr, topN=10, type="absolute")
# Display the distribution of number of items per basket
hist(size(df_tr), breaks = 0:1000, xaxt = "n",
main = "Number of Items per Basket", xlab = "Number of Items", col = "#00ADB5")
axis(side = 1, at = seq(0, 1000, by = 10), cex.axis = 0.8) # set x-axis label
mtext(paste("Total Baskets: ", length(df_tr)), line = -1) # set sub-title
# Display the distribution of number of items per basket
hist(size(df_tr), breaks = 0:2000, xaxt = "n",
main = "Number of Items per Basket", xlab = "Number of Items", col = "#00ADB5")
axis(side = 1, at = seq(0, 2000, by = 10), cex.axis = 0.8) # set x-axis label
mtext(paste("Total Baskets: ", length(df_tr)), line = -1) # set sub-title
# Display the distribution of number of items per basket
hist(size(df_tr), breaks = 0:200, xaxt = "n",
main = "Number of Items per Basket", xlab = "Number of Items", col = "#00ADB5")
axis(side = 1, at = seq(0, 200, by = 10), cex.axis = 0.8) # set x-axis label
mtext(paste("Total Baskets: ", length(df_tr)), line = -1) # set sub-title
itemFrequencyPlot(df_tr, topN = 15, type = "absolute", col = "#00ADB5",
main = "Top 15 Most Frequent Items")
itemFrequencyPlot(df_tr, topN = 15, type = "relative", col = "#00ADB5",
main = "Top 15 Most Frequent Items")
# Support and confidence values
support_levels <- c(0.05, 0.04, 0.03, 0.02)
confidence_levels <- seq(0.9, 0.1, by = -0.1)
# Create empty integers for each support level
for(i in support_levels) {
rules_count <- integer(length = length(confidence_levels))
for(j in 1:length(confidence_levels)) {
rules_count[j] <- length(apriori(df_tr, parameter = list(support=i, confidence=confidence_levels[j], target = "rules", minlen = 2)))
}
nam <- paste("rules_supp_", i, sep = "")
assign(nam, rules_count)
}
num_rules <- data.frame(rules_supp_0.01, rules_supp_0.008, rules_supp_0.006, rules_supp_0.004, confidence_levels)
ggplot(num_rules, aes(x = confidence_levels)) +
geom_line(aes(y = rules_supp_0.01, color = "Support level of 0.01")) +
geom_point(aes(y = rules_supp_0.01, color = "Support level of 0.01")) +
geom_line(aes(y = rules_supp_0.008, color = "Support level of 0.008")) +
geom_point(aes(y = rules_supp_0.008, color = "Support level of 0.008")) +
geom_line(aes(y = rules_supp_0.006, color = "Support level of 0.006")) +
geom_point(aes(y = rules_supp_0.006, color = "Support level of 0.006")) +
geom_line(aes(y = rules_supp_0.004, color = "Support level of 0.004")) +
geom_point(aes(y = rules_supp_0.004, color = "Support level of 0.004")) +
scale_x_continuous(breaks = seq(0.1, 0.9, by = 0.1),
labels = seq(0.1, 0.9, by = 0.1)) +
theme_bw() +
theme(legend.title = element_blank())
ggplot(num_rules, aes(x = confidence_levels)) +
geom_line(aes(y = rules_supp_0.05, color = "Support level of 0.01")) +
geom_point(aes(y = rules_supp_0.05, color = "Support level of 0.01")) +
geom_line(aes(y = rules_supp_0.04, color = "Support level of 0.008")) +
geom_point(aes(y = rules_supp_0.04, color = "Support level of 0.008")) +
geom_line(aes(y = rules_supp_0.03, color = "Support level of 0.006")) +
geom_point(aes(y = rules_supp_0.03, color = "Support level of 0.006")) +
geom_line(aes(y = rules_supp_0.02, color = "Support level of 0.004")) +
geom_point(aes(y = rules_supp_0.02, color = "Support level of 0.004")) +
scale_x_continuous(breaks = seq(0.1, 0.9, by = 0.1),
labels = seq(0.1, 0.9, by = 0.1)) +
theme_bw() +
theme(legend.title = element_blank())
supp_list <- list()
# Support and confidence values
support_levels <- c(0.05, 0.04, 0.03, 0.02)
confidence_levels <- seq(0.9, 0.1, by = -0.1)
# Create empty integers for each support level
for(i in support_levels) {
rules_count <- integer(length = length(confidence_levels))
for(j in 1:length(confidence_levels)) {
rules_count[j] <- length(apriori(df_tr, parameter = list(support=i, confidence=confidence_levels[j], target = "rules", minlen = 2)))
}
nam <- paste("rules_supp_", i, sep = "")
assign(nam, rules_count)
supp_list <- c(supp_list, nam)
}
supp_list
supp_list[1]
supp_list[1][1]
supp_list[1]
supp_list
inspect(supp_list)
# Support and confidence values
support_levels <- c(0.04, 0.037, 0.033, 0.03)
confidence_levels <- seq(0.9, 0.1, by = -0.1)
# Create empty integers for each support level
for(i in support_levels) {
rules_count <- integer(length = length(confidence_levels))
for(j in 1:length(confidence_levels)) {
rules_count[j] <- length(apriori(df_tr, parameter = list(support=i, confidence=confidence_levels[j], target = "rules", minlen = 2)))
}
nam <- paste("rules_supp_", i, sep = "")
assign(nam, rules_count)
supp_list <- c(supp_list, nam)
}
num_rules <- data.frame(rules_supp_0.04, rules_supp_0.037, rules_supp_0.033, rules_supp_0.03, confidence_levels)
ggplot(num_rules, aes(x = confidence_levels)) +
geom_line(aes(y = rules_supp_0.04, color = "Support level of 0.01")) +
geom_point(aes(y = rules_supp_0.04, color = "Support level of 0.01")) +
geom_line(aes(y = rules_supp_0.037, color = "Support level of 0.008")) +
geom_point(aes(y = rules_supp_0.037, color = "Support level of 0.008")) +
geom_line(aes(y = rules_supp_0.034, color = "Support level of 0.006")) +
geom_point(aes(y = rules_supp_0.034, color = "Support level of 0.006")) +
geom_line(aes(y = rules_supp_0.03, color = "Support level of 0.004")) +
geom_point(aes(y = rules_supp_0.03, color = "Support level of 0.004")) +
scale_x_continuous(breaks = seq(0.1, 0.9, by = 0.1),
labels = seq(0.1, 0.9, by = 0.1)) +
theme_bw() +
theme(legend.title = element_blank())
ggplot(num_rules, aes(x = confidence_levels)) +
geom_line(aes(y = rules_supp_0.04, color = "Support level of 0.01")) +
geom_point(aes(y = rules_supp_0.04, color = "Support level of 0.01")) +
geom_line(aes(y = rules_supp_0.037, color = "Support level of 0.008")) +
geom_point(aes(y = rules_supp_0.037, color = "Support level of 0.008")) +
geom_line(aes(y = rules_supp_0.033, color = "Support level of 0.006")) +
geom_point(aes(y = rules_supp_0.033, color = "Support level of 0.006")) +
geom_line(aes(y = rules_supp_0.03, color = "Support level of 0.004")) +
geom_point(aes(y = rules_supp_0.03, color = "Support level of 0.004")) +
scale_x_continuous(breaks = seq(0.1, 0.9, by = 0.1),
labels = seq(0.1, 0.9, by = 0.1)) +
theme_bw() +
theme(legend.title = element_blank())
# Load the data
orders <- read_excel("~/GitHub/clp_data_analytic/association_rules/Online_Retail.xlsx", n_max = 100000)
summary(orders)
# Check the structure
glimpse(orders)
# Inspect first few rows
head(orders)
orders <- na.omit(orders)
orders <- orders %>% mutate(Description = str_to_title(Description)) %>%
mutate(Description = as.factor(Description))
head(orders)
# Join the data on product_id
df <- orders %>%
group_by(InvoiceNo) %>%
summarise(basket = as.vector(list(Description)))
head(df)
df_tr <- as(df$basket, "transactions")
df_tr
inspect(head(df_tr))
itemFrequencyPlot(df_tr, topN=10, type="absolute")
# Display the distribution of number of items per basket
hist(size(df_tr), breaks = 0:200, xaxt = "n",
main = "Number of Items per Basket", xlab = "Number of Items", col = "#00ADB5")
# Display the distribution of number of items per basket
hist(size(df_tr), breaks = 0:1000, xaxt = "n",
main = "Number of Items per Basket", xlab = "Number of Items", col = "#00ADB5")
axis(side = 1, at = seq(0, 1000, by = 10), cex.axis = 0.8) # set x-axis label
mtext(paste("Total Baskets: ", length(df_tr)), line = -1) # set sub-title
# Display the distribution of number of items per basket
hist(size(df_tr), breaks = 0:250, xaxt = "n",
main = "Number of Items per Basket", xlab = "Number of Items", col = "#00ADB5")
axis(side = 1, at = seq(0, 250, by = 10), cex.axis = 0.8) # set x-axis label
mtext(paste("Total Baskets: ", length(df_tr)), line = -1) # set sub-title
itemFrequencyPlot(df_tr, topN = 15, type = "absolute", col = "#00ADB5",
main = "Top 15 Most Frequent Items")
itemFrequencyPlot(df_tr, topN = 15, type = "relative", col = "#00ADB5",
main = "Top 15 Most Frequent Items")
# Support and confidence values
support_levels <- c(0.03, 0.025, 0.02, 0.015)
confidence_levels <- seq(0.9, 0.1, by = -0.1)
# Create empty integers for each support level
for(i in support_levels) {
rules_count <- integer(length = length(confidence_levels))
for(j in 1:length(confidence_levels)) {
rules_count[j] <- length(apriori(df_tr, parameter = list(support=i, confidence=confidence_levels[j], target = "rules", minlen = 2)))
}
nam <- paste("rules_supp_", i, sep = "")
assign(nam, rules_count)
supp_list <- c(supp_list, nam)
}
num_rules <- data.frame(rules_supp_0.03, rules_supp_0.025, rules_supp_0.02, rules_supp_0.015, confidence_levels)
ggplot(num_rules, aes(x = confidence_levels)) +
geom_line(aes(y = rules_supp_0.03, color = "Support level of 0.01")) +
geom_point(aes(y = rules_supp_0.03, color = "Support level of 0.01")) +
geom_line(aes(y = rules_supp_0.025, color = "Support level of 0.008")) +
geom_point(aes(y = rules_supp_0.025, color = "Support level of 0.008")) +
geom_line(aes(y = rules_supp_0.02, color = "Support level of 0.006")) +
geom_point(aes(y = rules_supp_0.02, color = "Support level of 0.006")) +
geom_line(aes(y = rules_supp_0.015, color = "Support level of 0.004")) +
geom_point(aes(y = rules_supp_0.015, color = "Support level of 0.004")) +
scale_x_continuous(breaks = seq(0.1, 0.9, by = 0.1),
labels = seq(0.1, 0.9, by = 0.1)) +
theme_bw() +
theme(legend.title = element_blank())
# Support and confidence values
support_levels <- c(0.02, 0.015, 0.01, 0.005)
confidence_levels <- seq(0.9, 0.1, by = -0.1)
# Create empty integers for each support level
d <- dict()
install.packages("dict")
# Support and confidence values
support_levels <- c(0.02, 0.015, 0.01, 0.005)
confidence_levels <- seq(0.9, 0.1, by = -0.1)
# Create empty integers for each support level
library(dict)
# Support and confidence values
support_levels <- c(0.02, 0.015, 0.01, 0.005)
confidence_levels <- seq(0.9, 0.1, by = -0.1)
# Create empty integers for each support level
library(hash)
install.packages("hash")
# Support and confidence values
support_levels <- c(0.02, 0.015, 0.01, 0.005)
confidence_levels <- seq(0.9, 0.1, by = -0.1)
# Create empty integers for each support level
library(hash)
d <- hash()
for(i in support_levels) {
rules_count <- integer(length = length(confidence_levels))
for(j in 1:length(confidence_levels)) {
rules_count[j] <- length(apriori(df_tr, parameter = list(support=i, confidence=confidence_levels[j], target = "rules", minlen = 2)))
}
nam <- paste("rules_supp_", i, sep = "")
assign(nam, rules_count)
d[[i]] <- nam
}
# Support and confidence values
support_levels <- c(0.02, 0.015, 0.01, 0.005)
confidence_levels <- seq(0.9, 0.1, by = -0.1)
# Create empty integers for each support level
library(hash)
d <- hash()
for(i in support_levels) {
rules_count <- integer(length = length(confidence_levels))
for(j in 1:length(confidence_levels)) {
rules_count[j] <- length(apriori(df_tr, parameter = list(support=i, confidence=confidence_levels[j], target = "rules", minlen = 2)))
}
nam <- paste("rules_supp_", i, sep = "")
assign(nam, rules_count)
d[[i]] <- rules_count
}
# Support and confidence values
support_levels <- c(0.02, 0.015, 0.01, 0.005)
confidence_levels <- seq(0.9, 0.1, by = -0.1)
# Create empty integers for each support level
library(hash)
d <- hash()
for(i in support_levels) {
rules_count <- integer(length = length(confidence_levels))
for(j in 1:length(confidence_levels)) {
rules_count[j] <- length(apriori(df_tr, parameter = list(support=i, confidence=confidence_levels[j], target = "rules", minlen = 2)))
}
nam <- paste("rules_supp_", i, sep = "")
assign(nam, rules_count)
d[[toString(i)]] <- rules_count
}
d
d[1]
d[[1]]
d["0.02"]
# Support and confidence values
support_levels <- c(0.025, 0.02, 0.015, 0.01)
confidence_levels <- seq(0.9, 0.1, by = -0.1)
# Create empty integers for each support level
library(hash)
d <- hash()
k <- 1
for(i in support_levels) {
rules_count <- integer(length = length(confidence_levels))
for(j in 1:length(confidence_levels)) {
rules_count[j] <- length(apriori(df_tr, parameter = list(support=i, confidence=confidence_levels[j], target = "rules", minlen = 2)))
}
nam <- paste("rules_supp_", i, sep = "")
assign(nam, rules_count)
d[[toString(k)]] <- rules_count
k <- k + 1
}
d["1"]
d[["1"]]
num_rules <- data.frame(d[["1"]], d[["2"]], d[["3"]], d[["4"]], confidence_levels)
ggplot(num_rules, aes(x = confidence_levels)) +
geom_line(aes(y = d[["1"]], color = "Support level of 0.01")) +
geom_point(aes(y = d[["1"]], color = "Support level of 0.01")) +
geom_line(aes(y = d[["2"]], color = "Support level of 0.008")) +
geom_point(aes(y = d[["2"]], color = "Support level of 0.008")) +
geom_line(aes(y = d[["3"]], color = "Support level of 0.006")) +
geom_point(aes(y = d[["3"]], color = "Support level of 0.006")) +
geom_line(aes(y = d[["4"]], color = "Support level of 0.004")) +
geom_point(aes(y = d[["4"]], color = "Support level of 0.004")) +
scale_x_continuous(breaks = seq(0.1, 0.9, by = 0.1),
labels = seq(0.1, 0.9, by = 0.1)) +
theme_bw() +
theme(legend.title = element_blank())
support_levels[1]
ggplot(num_rules, aes(x = confidence_levels)) +
geom_line(aes(y = d[["1"]], color = paste("Support level of", support_levels[1]))) +
geom_point(aes(y = d[["1"]], color = paste("Support level of", support_levels[1]))) +
geom_line(aes(y = d[["2"]], color = paste("Support level of", support_levels[2]))) +
geom_point(aes(y = d[["2"]], color = paste("Support level of", support_levels[2]))) +
geom_line(aes(y = d[["3"]], color = paste("Support level of", support_levels[3]))) +
geom_point(aes(y = d[["3"]], color = paste("Support level of", support_levels[3]))) +
geom_line(aes(y = d[["4"]], color = paste("Support level of", support_levels[4]))) +
geom_point(aes(y = d[["4"]], color = paste("Support level of", support_levels[4]))) +
scale_x_continuous(breaks = seq(0.1, 0.9, by = 0.1),
labels = seq(0.1, 0.9, by = 0.1)) +
theme_bw() +
theme(legend.title = element_blank())
rules1 <- apriori(df_tr, parameter = list(supp = 0.015, conf = 0.6), control = list(verbose = FALSE))
plot(rules1)
plot(rule1, method = "group")
plot(rule1, method = "graph")
plot(rules1, method = "graph")
plot(rules1, method = "graph", control = list(cex=0.5))
plot(rules1, method = "graph", control = list(cex=0.3))
rules1 <- apriori(df_tr, parameter = list(supp = 0.015, conf = 0.6, minlen = 2), control = list(verbose = FALSE))
plot(rules1)
plot(rules1, method = "graph", control = list(cex=0.3))
plot(rules1, method = "graph", control = list(cex=0.4))
plot(rules1, method = "graph", control = list(cex=0.2))
plot(rules1, method = "graph", control = list(cex=0.3))
plot(rules1, method = "graph", control = list(cex=0.4))
rules1 <- apriori(df_tr, parameter = list(supp = 0.015, conf = 0.6, minlen = 2))
plot(rules1)
plot(rules1, method = "graph", control = list(cex=0.5))
rules1 <- apriori(df_tr, parameter = list(supp = 0.015, conf = 0.6, minlen = 2, maxlen = 3))
plot(rules1)
plot(rules1, method = "graph", control = list(cex=0.5))
plot(rules1, method = "graph", control = list(cex=0.3))
inspect(sort(rules1, by = "confidence")[1:10])
rules1 <- apriori(df_tr, parameter = list(supp = 0.01, conf = 0.6, minlen = 2, maxlen = 3))
plot(rules1)
inspect(sort(rules1, by = "confidence")[1:10])
plot(sort(rules1, by = "confidence")[1:20], method = "graph", control = list(cex=0.3))
rules1 <- apriori(df_tr, parameter = list(target = "frequent itemsets", supp = 0.01, conf = 0.6, minlen = 2, maxlen = 3))
plot(rules1)
plot(rules1, method = "graph", control = list(cex=0.3))
plot(sort(rules1, by = "support")[1:20], method = "graph", control = list(cex=0.3))
plot(sort(rules1, by = "support")[1:20], method = "graph", control = list(cex=0.5))
plot(sort(rules1, by = "support")[1:20], method = "graph", control = list(cex=0.4))
plot(sort(rules1, by = "support")[1:10], method = "graph", control = list(cex=0.4))
plot(sort(rules1, by = "support")[1:10], method = "graph", control = list(cex=0.5))
itemFrequencyPlot(rules1)
ggplot(sort(rules1, by = "support")[1:10])
ggplot(sort(rules1, by = "support")[1:10], aes(x = items, y = support)) + geom_col() +
coord_flip()
ggplot(DATAFRAME(sort(rules1, by = "support")[1:10]), aes(x = items, y = support)) + geom_col() +
coord_flip()
ggplot(DATAFRAME(sort(rules1, by = "support", decreasing = TRUE)[1:10]), aes(x = items, y = support)) + geom_col() +
coord_flip()
# Load packages
library(dplyr)
library(arules)
library(arulesViz)
library(ggplot2)
# Load the data
orders <- read.csv("order_products__prior.csv", nrows = 100000)
products <- read.csv("products.csv")
# Check the structure
glimpse(orders)
glimpse(products)
# Inspect first few rows
head(orders)
head(products)
# Join the data on product_id
df <- orders %>%
inner_join(products, by = "product_id") %>%
group_by(order_id) %>%
summarise(basket = as.vector(list(product_name)))
head(df)
df_tr <- as(df$basket, "transactions")
# Load the data
orders <- read.csv("order_products__prior.csv", nrows = 50000)
products <- read.csv("products.csv")
