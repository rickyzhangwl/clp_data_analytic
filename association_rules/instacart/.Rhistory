# Display the distribution of number of items per basket
hist(size(df_tr), breaks = 0:80, xaxt = "n",
main = "Number of Items per Basket", xlab = "Number of Items", col = "#00ADB5")
axis(side = 1, at = seq(0, 80, by = 10), cex.axis = 0.8) # set x-axis label
mtext(paste("Total Baskets: ", length(df_tr)), line = -1) # set sub-title
itemFrequencyPlot(df_tr, topN = 15, type = "absolute", col = "#00ADB5",
main = "Top 15 Most Frequent Items")
itemFrequencyPlot(df_tr, topN = 15, type = "relative", col = "#00ADB5",
main = "Top 15 Most Frequent Items")
# Support and confidence values
support_levels <- c(0.025, 0.02, 0.015, 0.01)
confidence_levels <- seq(0.9, 0.1, by = -0.1)
# Create empty integers for each support level
library(hash)
d <- hash()
k <- 1
for(i in support_levels) {
rules_count <- integer(length = length(confidence_levels))
for(j in 1:length(confidence_levels)) {
rules_count[j] <- length(apriori(df_tr, parameter = list(support=i, confidence=confidence_levels[j], target = "rules", minlen = 2)))
}
nam <- paste("rules_supp_", i, sep = "")
assign(nam, rules_count)
d[[toString(k)]] <- rules_count
k <- k + 1
}
num_rules <- data.frame(d[["1"]], d[["2"]], d[["3"]], d[["4"]], confidence_levels)
ggplot(num_rules, aes(x = confidence_levels)) +
geom_line(aes(y = d[["1"]], color = paste("Support level of", support_levels[1]))) +
geom_point(aes(y = d[["1"]], color = paste("Support level of", support_levels[1]))) +
geom_line(aes(y = d[["2"]], color = paste("Support level of", support_levels[2]))) +
geom_point(aes(y = d[["2"]], color = paste("Support level of", support_levels[2]))) +
geom_line(aes(y = d[["3"]], color = paste("Support level of", support_levels[3]))) +
geom_point(aes(y = d[["3"]], color = paste("Support level of", support_levels[3]))) +
geom_line(aes(y = d[["4"]], color = paste("Support level of", support_levels[4]))) +
geom_point(aes(y = d[["4"]], color = paste("Support level of", support_levels[4]))) +
scale_x_continuous(breaks = seq(0.1, 0.9, by = 0.1),
labels = seq(0.1, 0.9, by = 0.1)) +
theme_bw() +
theme(legend.title = element_blank())
# Support and confidence values
support_levels <- c(0.01, 0.008, 0.006, 0.004)
confidence_levels <- seq(0.9, 0.1, by = -0.1)
# Create empty integers for each support level
library(hash)
d <- hash()
k <- 1
for(i in support_levels) {
rules_count <- integer(length = length(confidence_levels))
for(j in 1:length(confidence_levels)) {
rules_count[j] <- length(apriori(df_tr, parameter = list(support=i, confidence=confidence_levels[j], target = "rules", minlen = 2)))
}
nam <- paste("rules_supp_", i, sep = "")
assign(nam, rules_count)
d[[toString(k)]] <- rules_count
k <- k + 1
}
num_rules <- data.frame(d[["1"]], d[["2"]], d[["3"]], d[["4"]], confidence_levels)
ggplot(num_rules, aes(x = confidence_levels)) +
geom_line(aes(y = d[["1"]], color = paste("Support level of", support_levels[1]))) +
geom_point(aes(y = d[["1"]], color = paste("Support level of", support_levels[1]))) +
geom_line(aes(y = d[["2"]], color = paste("Support level of", support_levels[2]))) +
geom_point(aes(y = d[["2"]], color = paste("Support level of", support_levels[2]))) +
geom_line(aes(y = d[["3"]], color = paste("Support level of", support_levels[3]))) +
geom_point(aes(y = d[["3"]], color = paste("Support level of", support_levels[3]))) +
geom_line(aes(y = d[["4"]], color = paste("Support level of", support_levels[4]))) +
geom_point(aes(y = d[["4"]], color = paste("Support level of", support_levels[4]))) +
scale_x_continuous(breaks = seq(0.1, 0.9, by = 0.1),
labels = seq(0.1, 0.9, by = 0.1)) +
theme_bw() +
theme(legend.title = element_blank())
# Support and confidence values
support_levels <- c(0.008, 0.006, 0.004, 0.002)
confidence_levels <- seq(0.9, 0.1, by = -0.1)
# Create empty integers for each support level
library(hash)
d <- hash()
k <- 1
for(i in support_levels) {
rules_count <- integer(length = length(confidence_levels))
for(j in 1:length(confidence_levels)) {
rules_count[j] <- length(apriori(df_tr, parameter = list(support=i, confidence=confidence_levels[j], target = "rules", minlen = 2)))
}
nam <- paste("rules_supp_", i, sep = "")
assign(nam, rules_count)
d[[toString(k)]] <- rules_count
k <- k + 1
}
num_rules <- data.frame(d[["1"]], d[["2"]], d[["3"]], d[["4"]], confidence_levels)
ggplot(num_rules, aes(x = confidence_levels)) +
geom_line(aes(y = d[["1"]], color = paste("Support level of", support_levels[1]))) +
geom_point(aes(y = d[["1"]], color = paste("Support level of", support_levels[1]))) +
geom_line(aes(y = d[["2"]], color = paste("Support level of", support_levels[2]))) +
geom_point(aes(y = d[["2"]], color = paste("Support level of", support_levels[2]))) +
geom_line(aes(y = d[["3"]], color = paste("Support level of", support_levels[3]))) +
geom_point(aes(y = d[["3"]], color = paste("Support level of", support_levels[3]))) +
geom_line(aes(y = d[["4"]], color = paste("Support level of", support_levels[4]))) +
geom_point(aes(y = d[["4"]], color = paste("Support level of", support_levels[4]))) +
scale_x_continuous(breaks = seq(0.1, 0.9, by = 0.1),
labels = seq(0.1, 0.9, by = 0.1)) +
theme_bw() +
theme(legend.title = element_blank())
rules1 <- apriori(df_tr, parameter = list(supp = 0.002, conf = 0.5), control = list(verbose = FALSE))
plot(rules1)
plot(rules1, method = "graph")
plot(rules1, method = "graph", control = list(cex=0.5))
rules1 <- apriori(df_tr, parameter = list(supp = 0.002, conf = 0.6, minlen=2, maxlen=3))
plot(rules1)
plot(rules1, method = "graph", control = list(cex=0.5))
rules1 <- apriori(df_tr, parameter = list(supp = 0.002, conf = 0.5, minlen=2, maxlen=3))
plot(rules1)
plot(rules1, method = "graph", control = list(cex=0.5))
# Load packages
library(dplyr)
library(arules)
library(arulesViz)
library(ggplot2)
# Load packages
library(dplyr)
library(arules)
library(arulesViz)
library(ggplot2)
# Load the data
orders <- read.csv("order_products__prior.csv", nrows = 30000)
products <- read.csv("products.csv")
# Check the structure
glimpse(orders)
glimpse(products)
# Inspect first few rows
head(orders)
head(products)
# Join the data on product_id
df <- orders %>%
inner_join(products, by = "product_id") %>%
group_by(order_id) %>%
summarise(basket = as.vector(list(product_name)))
head(df)
df_tr <- as(df$basket, "transactions")
#
df_tr
# inspect first few transactions
inspect(head(df_tr))
# plot the top 10 frequent items
itemFrequencyPlot(df_tr, topN=10, type="absolute")
# plot the top 10 frequent items
itemFrequencyPlot(df_tr, topN = 10, type = "absolute", color = "#00ADB5")
# plot the top 10 frequent items
itemFrequencyPlot(df_tr, topN = 10, type = "absolute", col = "#00ADB5")
# Display the distribution of number of items per basket
hist(size(df_tr), breaks = 0:80, xaxt = "n",
main = "Number of Items per Basket", xlab = "Number of Items", col = "#00ADB5")
axis(side = 1, at = seq(0, 80, by = 10), cex.axis = 0.8) # set x-axis label
mtext(paste("Total Baskets: ", length(df_tr)), line = -1) # set sub-title
# Display the distribution of number of items per basket
hist(size(df_tr), breaks = 0:80, xaxt = "n",
main = "Number of Items per Basket", xlab = "Number of Items", col = "#00ADB5")
axis(side = 1, at = seq(0, 80, by = 10), cex.axis = 0.8) # set x-axis label
mtext(paste("Total Baskets: ", length(df_tr)), line = -1) # set sub-title
itemFrequencyPlot(df_tr, topN = 15, type = "absolute", col = "#00ADB5",
main = "Top 15 Most Frequent Items")
itemFrequencyPlot(df_tr, topN = 15, type = "relative", col = "#00ADB5",
main = "Top 15 Most Frequent Items")
itemFrequencyPlot(df_tr, topN = 15, type = "absolute", col = "#00ADB5",
main = "Top 15 Most Frequent Items - Absolute")
itemFrequencyPlot(df_tr, topN = 15, type = "relative", col = "#00ADB5",
main = "Top 15 Most Frequent Items - Relative")
# Support and confidence values
support_levels <- c(0.008, 0.006, 0.004, 0.002)
confidence_levels <- seq(0.9, 0.1, by = -0.1)
# Create empty integers for each support level
library(hash)
d <- hash()
k <- 1
for(i in support_levels) {
rules_count <- integer(length = length(confidence_levels))
for(j in 1:length(confidence_levels)) {
rules_count[j] <- length(apriori(df_tr, parameter = list(support=i, confidence=confidence_levels[j], target = "rules", minlen = 2)))
}
nam <- paste("rules_supp_", i, sep = "")
assign(nam, rules_count)
d[[toString(k)]] <- rules_count
k <- k + 1
}
num_rules <- data.frame(d[["1"]], d[["2"]], d[["3"]], d[["4"]], confidence_levels)
ggplot(num_rules, aes(x = confidence_levels)) +
geom_line(aes(y = d[["1"]], color = paste("Support level of", support_levels[1]))) +
geom_point(aes(y = d[["1"]], color = paste("Support level of", support_levels[1]))) +
geom_line(aes(y = d[["2"]], color = paste("Support level of", support_levels[2]))) +
geom_point(aes(y = d[["2"]], color = paste("Support level of", support_levels[2]))) +
geom_line(aes(y = d[["3"]], color = paste("Support level of", support_levels[3]))) +
geom_point(aes(y = d[["3"]], color = paste("Support level of", support_levels[3]))) +
geom_line(aes(y = d[["4"]], color = paste("Support level of", support_levels[4]))) +
geom_point(aes(y = d[["4"]], color = paste("Support level of", support_levels[4]))) +
scale_x_continuous(breaks = seq(0.1, 0.9, by = 0.1),
labels = seq(0.1, 0.9, by = 0.1)) +
theme_bw() +
theme(legend.title = element_blank())
# Support and confidence values
support_levels <- c(0.010, 0.008, 0.006, 0.004)
confidence_levels <- seq(0.9, 0.1, by = -0.1)
# Create empty integers for each support level
library(hash)
d <- hash()
k <- 1
for(i in support_levels) {
rules_count <- integer(length = length(confidence_levels))
for(j in 1:length(confidence_levels)) {
rules_count[j] <- length(apriori(df_tr, parameter = list(support=i, confidence=confidence_levels[j], target = "rules", minlen = 2)))
}
nam <- paste("rules_supp_", i, sep = "")
assign(nam, rules_count)
d[[toString(k)]] <- rules_count
k <- k + 1
}
num_rules <- data.frame(d[["1"]], d[["2"]], d[["3"]], d[["4"]], confidence_levels)
ggplot(num_rules, aes(x = confidence_levels)) +
geom_line(aes(y = d[["1"]], color = paste("Support level of", support_levels[1]))) +
geom_point(aes(y = d[["1"]], color = paste("Support level of", support_levels[1]))) +
geom_line(aes(y = d[["2"]], color = paste("Support level of", support_levels[2]))) +
geom_point(aes(y = d[["2"]], color = paste("Support level of", support_levels[2]))) +
geom_line(aes(y = d[["3"]], color = paste("Support level of", support_levels[3]))) +
geom_point(aes(y = d[["3"]], color = paste("Support level of", support_levels[3]))) +
geom_line(aes(y = d[["4"]], color = paste("Support level of", support_levels[4]))) +
geom_point(aes(y = d[["4"]], color = paste("Support level of", support_levels[4]))) +
scale_x_continuous(breaks = seq(0.1, 0.9, by = 0.1),
labels = seq(0.1, 0.9, by = 0.1)) +
theme_bw() +
theme(legend.title = element_blank())
# Support and confidence values
support_levels <- c(0.0035, 0.003, 0.0025, 0.002)
confidence_levels <- seq(0.9, 0.1, by = -0.1)
# Create empty integers for each support level
library(hash)
d <- hash()
k <- 1
for(i in support_levels) {
rules_count <- integer(length = length(confidence_levels))
for(j in 1:length(confidence_levels)) {
rules_count[j] <- length(apriori(df_tr, parameter = list(support=i, confidence=confidence_levels[j], target = "rules", minlen = 2)))
}
nam <- paste("rules_supp_", i, sep = "")
assign(nam, rules_count)
d[[toString(k)]] <- rules_count
k <- k + 1
}
num_rules <- data.frame(d[["1"]], d[["2"]], d[["3"]], d[["4"]], confidence_levels)
ggplot(num_rules, aes(x = confidence_levels)) +
geom_line(aes(y = d[["1"]], color = paste("Support level of", support_levels[1]))) +
geom_point(aes(y = d[["1"]], color = paste("Support level of", support_levels[1]))) +
geom_line(aes(y = d[["2"]], color = paste("Support level of", support_levels[2]))) +
geom_point(aes(y = d[["2"]], color = paste("Support level of", support_levels[2]))) +
geom_line(aes(y = d[["3"]], color = paste("Support level of", support_levels[3]))) +
geom_point(aes(y = d[["3"]], color = paste("Support level of", support_levels[3]))) +
geom_line(aes(y = d[["4"]], color = paste("Support level of", support_levels[4]))) +
geom_point(aes(y = d[["4"]], color = paste("Support level of", support_levels[4]))) +
scale_x_continuous(breaks = seq(0.1, 0.9, by = 0.1),
labels = seq(0.1, 0.9, by = 0.1)) +
theme_bw() +
theme(legend.title = element_blank())
num_rules <- data.frame(d[["1"]], d[["2"]], d[["3"]], d[["4"]], confidence_levels)
ggplot(num_rules, aes(x = confidence_levels)) +
geom_line(aes(y = d[["1"]], color = paste("Support level of", support_levels[1]))) +
geom_point(aes(y = d[["1"]], color = paste("Support level of", support_levels[1]))) +
geom_line(aes(y = d[["2"]], color = paste("Support level of", support_levels[2]))) +
geom_point(aes(y = d[["2"]], color = paste("Support level of", support_levels[2]))) +
geom_line(aes(y = d[["3"]], color = paste("Support level of", support_levels[3]))) +
geom_point(aes(y = d[["3"]], color = paste("Support level of", support_levels[3]))) +
geom_line(aes(y = d[["4"]], color = paste("Support level of", support_levels[4]))) +
geom_point(aes(y = d[["4"]], color = paste("Support level of", support_levels[4]))) +
scale_x_continuous(breaks = seq(0.1, 0.9, by = 0.1),
labels = seq(0.1, 0.9, by = 0.1)) +
labs(title = "Number of Rules by Support & Confidence",
x = "Confidence", y = "Count")
theme_bw() +
theme(legend.title = element_blank())
num_rules <- data.frame(d[["1"]], d[["2"]], d[["3"]], d[["4"]], confidence_levels)
ggplot(num_rules, aes(x = confidence_levels)) +
geom_line(aes(y = d[["1"]], color = paste("Support level of", support_levels[1]))) +
geom_point(aes(y = d[["1"]], color = paste("Support level of", support_levels[1]))) +
geom_line(aes(y = d[["2"]], color = paste("Support level of", support_levels[2]))) +
geom_point(aes(y = d[["2"]], color = paste("Support level of", support_levels[2]))) +
geom_line(aes(y = d[["3"]], color = paste("Support level of", support_levels[3]))) +
geom_point(aes(y = d[["3"]], color = paste("Support level of", support_levels[3]))) +
geom_line(aes(y = d[["4"]], color = paste("Support level of", support_levels[4]))) +
geom_point(aes(y = d[["4"]], color = paste("Support level of", support_levels[4]))) +
scale_x_continuous(breaks = seq(0.1, 0.9, by = 0.1),
labels = seq(0.1, 0.9, by = 0.1)) +
labs(title = "Number of Rules by Support & Confidence",
x = "Confidence", y = "Count") +
theme_bw() +
theme(legend.title = element_blank())
rules1 <- apriori(df_tr, parameter = list(supp = 0.002, conf = 0.5, minlen=2, maxlen=3))
plot(rules1)
plot(rules1, method = "graph", control = list(cex=0.5))
plot(sort(rules1, by = "support", decreasing = T)[1:20], method = "graph", control = list(cex=0.5))
plot(sort(rules1, by = "support", decreasing = T)[1:20], method = "grouped", control = list(cex=0.5))
rules1 <- apriori(df_tr, parameter = list(supp = 0.002, conf = 0.5, minlen=2, maxlen=3))
plot(rules1)
plot(sort(rules1, by = "support", decreasing = T)[1:20], method = "graph", control = list(cex=0.5))
plot(sort(rules1, by = "support", decreasing = T)[1:20], method = "grouped", control = list(cex=0.5))
plot(sort(rules1, by = "support", decreasing = T)[1:20], method = "grouped")
plot(rules1, method = "grouped")
ft_rules <- apriori(df_tr, parameter = list(target = "frequent itemsets", supp = 0.002, minlen = 2))
inspect(ft_rules)
inspect(sort(ft_rules, by = "support", decreasing = T)[1:10])
ft_rules <- apriori(df_tr, parameter = list(target = "frequent itemsets", supp = 0.002, minlen = 2))
inspect(sort(ft_rules, by = "support", decreasing = T)[1:10])
ft_rules_2 <- apriori(df_tr, parameter = list(target = "frequent itemsets", supp = 0.002, minlen = 3))
inspect(sort(ft_rules, by = "support", decreasing = T)[1:10])
ft_rules_2 <- apriori(df_tr, parameter = list(target = "frequent itemsets", supp = 0.002, minlen = 3))
inspect(sort(ft_rules_2, by = "support", decreasing = T)[1:10])
ft_rules_2 <- apriori(df_tr, parameter = list(target = "frequent itemsets", supp = 0.001, minlen = 3))
inspect(sort(ft_rules_2, by = "support", decreasing = T)[1:10])
ft_rules_2 <- apriori(df_tr, parameter = list(target = "frequent itemsets", supp = 0.0001, minlen = 3))
inspect(sort(ft_rules_2, by = "support", decreasing = T)[1:10])
ft_rules_2 <- apriori(df_tr, parameter = list(target = "frequent itemsets", supp = 0.0005, minlen = 3))
inspect(sort(ft_rules_2, by = "support", decreasing = T)[1:10])
ft_rules_2 <- apriori(df_tr, parameter = list(target = "frequent itemsets", supp = 0.0004, minlen = 3))
inspect(sort(ft_rules_2, by = "support", decreasing = T)[1:10])
ft_rules_2 <- apriori(df_tr, parameter = list(target = "frequent itemsets", supp = 0.0003, minlen = 3))
inspect(sort(ft_rules_2, by = "support", decreasing = T)[1:10])
plot(ft_rules, by = "support", decreasing = T)[1:10])
plot(sort(ft_rules, by = "support", decreasing = T)[1:10])
plot(sort(ft_rules, by = "support", decreasing = T)[1:10], method = "graph")
plot(sort(ft_rules, by = "support", decreasing = T)[1:10], method = "graph", list(cex=0.5))
plot(sort(ft_rules, by = "support", decreasing = T)[1:10], method = "graph", control = list(cex=0.5))
plot(sort(ft_rules, by = "support", decreasing = T)[1:10], method = "graph", control = list(cex=0.6))
plot(sort(ft_rules, by = "support", decreasing = T)[1:10], method = "matrix", control = list(cex=0.6))
plot(sort(ft_rules, by = "support", decreasing = T)[1:10], method = "paracoord", control = list(cex=0.6))
plot(sort(ft_rules, by = "support", decreasing = T)[1:10], method = "scatterplot", control = list(cex=0.6))
plot(sort(ft_rules, by = "support", decreasing = T)[1:10], method = "graph", control = list(cex=0.6))
plot(sort(ft_rules, by = "support", decreasing = T)[1:10], method = "graph", control = list(cex=0.6))
plot(sort(ft_rules, by = "support", decreasing = T)[1:10], method = "graph", control = list(cex=0.6))
setwd("~/GitHub/clp_data_analytic/association_rules/instacart")
# check the cleaned data
head(df)
head(df$basket)
# check the cleaned data
head(df)
head(df$basket[1:3])
# check the cleaned data
head(df)
itemFrequency(df_tr, topN = 15)
itemFrequency(df_tr, topN = 15)
itemFrequency(df_tr5)
itemFrequency(df_tr)
itemFrequency(df_tr, topN = 10)
top_15 <- df_tr %>%
itemFrequency(type = "absolute")
top_15 <- df_tr %>%
itemFrequency(type = "absolute")
head(sort(decreasing = T), n = 15)
top_15 <- df_tr %>%
itemFrequency(type = "absolute") %>%
head(sort(decreasing = T), n = 15)
top_15
top_15 <- df_tr %>%
itemFrequency(type = "absolute") %>%
head(sort(by = "support", decreasing = T), n = 15)
top_15
top_15 <- df_tr %>%
itemFrequency(type = "absolute") %>%
head(sort(by = "count", decreasing = T), n = 15)
top_15
top_15 <- df_tr %>%
itemFrequency(type = "absolute") #%>%
#head(sort(by = "count", decreasing = T), n = 15)
top_15
names(top_15)
rules1 <- apriori(df_tr, parameter = list(supp = 0.002, conf = 0.6, minlen=2, maxlen=3))
plot(rules1)
ft_rules <- apriori(df_tr, parameter = list(target = "frequent itemsets", supp = 0.002, minlen = 2))
inspect(sort(ft_rules, by = "support", decreasing = T)[1:10]) # top 10 itemsets
# Plot the top 10 itemsets
plot(sort(ft_rules, by = "support", decreasing = T)[1:10], method = "graph", control = list(cex=0.6))
# Plot the top 10 itemsets
plot(sort(ft_rules, by = "support", decreasing = T)[1:10], method = "graph", control = list(cex=0.6), main = "Top 10 Most Frequent Bought-Together Itemsets")
plot(sort(rules1, by = "support", decreasing = T)[1:20], method = "graph", control = list(cex=0.5))
plot(sort(rules1, by = "support", decreasing = T)[1:20], method = "matrix", control = list(cex=0.5))
plot(sort(rules1, by = "support", decreasing = T)[1:20], method = "group", control = list(cex=0.5))
plot(sort(rules1, by = "support", decreasing = T)[1:20], method = "graph", control = list(cex=0.5))
bf_bnn <- apriori(df_tr, parameter = list(supp = 0.002, conf = 0.5, minlen = 2),
appearance = list(default = "lhs", rhs %in% 'Limes'))
bf_bnn <- apriori(df_tr, parameter = list(supp = 0.002, conf = 0.5, minlen = 2),
appearance = list(default = "lhs", rhs %in% 'Banana'))
bf_bnn <- apriori(df_tr, parameter = list(supp = 0.002, conf = 0.5, minlen = 2),
appearance = list(default = "lhs", rhs = 'Banana'))
rules_1 <- apriori(df_tr, parameter = list(supp = 0.002, conf = 0.5, minlen = 2))
bf_bnn <- sort(subset(rules_1, subset = rhs %in% "Banana"), by = "lift", decreasing = T)
inspect(bf_bnn)
rules_1 <- apriori(df_tr, parameter = list(supp = 0.002, conf = 0.6))
bf_bnn <- sort(subset(rules_1, subset = rhs %in% "Banana"), by = "lift", decreasing = T)
inspect(bf_bnn)
rules_1 <- apriori(df_tr, parameter = list(supp = 0.003, conf = 0.6))
bf_bnn <- sort(subset(rules_1, subset = rhs %in% "Banana"), by = "lift", decreasing = T)
inspect(bf_bnn)
bf_bnn <- sort(subset(rules_1, subset = rhs %pin% "Banana"), by = "lift", decreasing = T)
inspect(bf_bnn)
inspect(rules_1)
rules_1 <- apriori(df_tr, parameter = list(supp = 0.002, conf = 0.6))
inspect(rules_1)
bf_bnn <- sort(subset(rules_1, subset = rhs %in% "Banana"), by = "lift", decreasing = T)
inspect(bf_bnn)
bf_bnn <- sort(subset(rules_1, subset = rhs %pin% "Banana"), by = "lift", decreasing = T)
inspect(bf_bnn)
rules_1 <- apriori(df_tr, parameter = list(supp = 0.002, conf = 0.7))
inspect(rules_1)
bf_bnn <- sort(subset(rules_1, subset = rhs %pin% "Banana"), by = "lift", decreasing = T)
inspect(bf_bnn)
bf_bnn <- sort(subset(rules_1, subset = rhs %pin% "Banana"), by = c("lift", "confidence"), decreasing = T)
inspect(bf_bnn)
plot(bf_bnn)
plot(bf_bnn, method = "graph")
plot(bf_bnn, method = "group")
plot(bf_bnn, method = "grouped")
plot(bf_bnn, method = "graph",  engine = "htmlwidget")
rules_2 <- apriori(df, parameter = list(support=0.002,confidence=0.8, minlen=2), appearance = list(default = "rhs", lhs = "Banana"))
rules_2 <- apriori(df, parameter = list(support=0.002,confidence=0.8, minlen=2), appearance = list(default = "rhs", lhs = "Banana"))
lime_rules_2 <- apriori(df, parameter = list(support=0.003,confidence=0.2, minlen=2, maxlen=3), appearance = list(default = "lhs", rhs = "Limes"))
rules_2 <- apriori(df, parameter = list(support=0.002,confidence=0.8, minlen=2), appearance = list(default = "rhs", lhs = "Banana"))
rules_2 <- apriori(df, parameter = list(supp=0.002,conf=0.8, minlen=2), appearance = list(default = "rhs", lhs = "Banana"))
rules_2 <- apriori(df, parameter = list(supp=0.002,conf=0.8, minlen=2, maxlen=3), appearance = list(default = "rhs", lhs = "Banana"))
rules_2 <- apriori(df, parameter = list(supp=0.002,conf=0.8, minlen=2))
rules_2 <- apriori(df_tr, parameter = list(supp=0.002,conf=0.8, minlen=2), appearance = list(default = "rhs", lhs = "Banana"))
inspect(rules_2)
rules_2 <- apriori(df_tr, parameter = list(supp=0.001,conf=0.8, minlen=2), appearance = list(default = "rhs", lhs = "Banana"))
inspect(rules_2)
rules_2 <- apriori(df_tr, parameter = list(supp=0.001,conf=0.5, minlen=2), appearance = list(default = "rhs", lhs = "Banana"))
inspect(rules_2)
rules_2 <- apriori(df_tr, parameter = list(supp=0.002,conf=0.8, minlen=2))
inspect(rules_2)
rules_2 <- apriori(df_tr, parameter = list(supp=0.002, conf=0.7, minlen=2))
inspect(rules_2)
inspect(rules_2)
rules_2 <- apriori(df_tr, parameter = list(supp=0.002, conf=0))
inspect(rules_2)
inspect(rules_2)
rules_2 <- apriori(df_tr, parameter = list(supp=0.002, conf=0.6))
inspect(rules_2)
rules_2 <- apriori(df_tr, parameter = list(supp=0.002, conf=0.7))
inspect(rules_2)
rules_2 <- apriori(df_tr, parameter = list(supp=0.002, conf=0.4), appearance = list(default = "rhs", lhs = "Banana"))
inspect(rules_2)
rules_2 <- apriori(df_tr, parameter = list(supp=0.0005, conf=0.4), appearance = list(default = "rhs", lhs = "Banana"))
inspect(rules_2)
inspect(rules_2)
rules_2 <- apriori(df_tr, parameter = list(supp=0.0002, conf=0.4), appearance = list(default = "rhs", lhs = "Banana"))
inspect(rules_2)
head(df)
aa<- subset(df, basket %pin% "Banana")
aa<- subset(df, subset = basket %pin% "Banana")
aa<- subset(df, subset = basket %in% "Banana")
aa
df_2 <- orders %>%
inner_join(products, by = "product_id") %>%
group_by(order_id)
head(df2)
head(df_2)
bnn_id_no <- filter(df_2, product_name = "Banana")
bnn_id_no <- filter(df_2, product_name %pin% "Banana")
bnn_id_no <- filter(df_2, product_name == "Banana")
bnn_id_no
filter(df_2, order_id == 551)
rules_2 <- apriori(df_tr, parameter = list(supp=0.0002, conf=0.2), appearance = list(default = "rhs", lhs = "Banana"))
rules_2 <- apriori(df_tr, parameter = list(supp=0.0002, conf=0.2), appearance = list(default = "rhs", lhs = "Banana"))
inspect(rules_2)
rules_2 <- apriori(df_tr, parameter = list(supp=0.0001, conf=0.1), appearance = list(default = "rhs", lhs = "Banana"))
inspect(rules_2)
# Support and confidence values
support_levels <- c(0.0035, 0.003, 0.0025, 0.002)
confidence_levels <- seq(0.9, 0.1, by = -0.1)
# Create empty integers for each support level
library(hash)
d <- hash()
k <- 1
for(i in support_levels) {
rules_count <- integer(length = length(confidence_levels))
for(j in 1:length(confidence_levels)) {
rules_count[j] <- length(apriori(df_tr, parameter = list(support=i, confidence=confidence_levels[j], target = "rules", minlen = 2)))
}
nam <- paste("rules_supp_", i, sep = "")
assign(nam, rules_count)
d[[toString(k)]] <- rules_count
k <- k + 1
}
num_rules <- data.frame(d[["1"]], d[["2"]], d[["3"]], d[["4"]], confidence_levels)
ggplot(num_rules, aes(x = confidence_levels)) +
geom_line(aes(y = d[["1"]], color = paste("Support level of", support_levels[1]))) +
geom_point(aes(y = d[["1"]], color = paste("Support level of", support_levels[1]))) +
geom_line(aes(y = d[["2"]], color = paste("Support level of", support_levels[2]))) +
geom_point(aes(y = d[["2"]], color = paste("Support level of", support_levels[2]))) +
geom_line(aes(y = d[["3"]], color = paste("Support level of", support_levels[3]))) +
geom_point(aes(y = d[["3"]], color = paste("Support level of", support_levels[3]))) +
geom_line(aes(y = d[["4"]], color = paste("Support level of", support_levels[4]))) +
geom_point(aes(y = d[["4"]], color = paste("Support level of", support_levels[4]))) +
scale_x_continuous(breaks = seq(0.1, 0.9, by = 0.1),
labels = seq(0.1, 0.9, by = 0.1)) +
labs(title = "Number of Rules by Support & Confidence",
x = "Confidence", y = "Count") +
theme_bw() +
theme(legend.title = element_blank())
plot(bf_bnn, method = "graph",  engine = "htmlwidget")
rules_1 <- apriori(df_tr, parameter = list(supp = 0.0025, conf = 0.6))
inspect(rules_1)
rules_1 <- apriori(df_tr, parameter = list(supp = 0.002, conf = 0.7))
inspect(rules_1)
rules_2 <- apriori(df_tr, parameter = list(supp=0.0002), appearance = list(default = "rhs", lhs = "Banana"))
inspect(rules_2)
rules_2 <- apriori(df_tr, parameter = list(supp=0.0001), appearance = list(default = "rhs", lhs = "Banana"))
inspect(rules_2)
rules_2 <- apriori(df_tr, parameter = list(supp=0.0001), appearance = list(default = "rhs", lhs = "Banana"))
inspect(rules_2)
