setwd("~/GitHub/clp_data_analytic")
install.packages(c("gdata", "GGally"))
# 1. Load packages
library(tidyverse)
# 2. Load data file
df <- read_csv("district_data.csv")
# check first a few rows
head(df)
names(df)
# check column names and rename them if needed
names(df)
names(df) <- c("district", "avg_income", "median_age")
names(df)
# check the summary of data
summary(df)
# 2. Load data file
df <- read_csv("district_data.csv")
# check first a few rows
head(df)
# check column names
names(df)
# rename the column names
names(df) <- c("district", "avg_income", "median_age")
# 2. Load data file
df <- read_csv("district_data.csv")
# check first a few rows
head(df)
# check column names
names(df)
# rename the column names
names(df) <- c("district", "avg_income", "median_age")
names(df)
# check the summary of data
summary(df)
# check column names
names(df)
# rename the column names
names(df) <- c("district", "avg_income", "median_age")
names(df)
# 2. Load data file
df <- read_csv("district_data.csv")
# check first a few rows
head(df)
# check column names
names(df)
# rename the column names
names(df) <- c("district", "avg_income", "median_age")
names(df)
# check the summary of data
summary(df)
# remove $
df$avg_income <- gsub("$", "", df$avg_income)
# remove thousand separator
df$avg_income <- gsub(",", "", df$avg_income)
# check the column
glimpse(df)
# 2. Load data file
df <- read_csv("district_data.csv")
# check first a few rows
head(df)
# check column names
names(df)
# rename the column names
names(df) <- c("district", "avg_income", "median_age")
names(df)
# remove $
df$avg_income <- gsub("[$,]", "", df$avg_income)
# remove thousand separator
#df$avg_income <- gsub(",", "", df$avg_income)
# check the column
glimpse(df)
# remove $ and thousand separator
df$avg_income <- gsub("[$,]", "", df$avg_income)
# convert to numeric
df$avg_income <- as.numeric(df$avg_income)
# check the column types
glimpse(df)
qplot(x = df$median_age, y = df$avg_income, label = df$district, geom = "text")
df_scaled <- as.data.frame(scale(df))
df_scaled <- as.data.frame(scale(df[c("avg_income", "median_age")]))
head(df_scaled)
df_scaled <- as.data.frame(scale(df[c("median_age", "avg_income")]))
head(df_scaled)
# define the number of clusters
k_clusters <- 3
# get clustering result
k_means_result <- kmeans(data_scaled, centers = k_clusters)
# define the number of clusters
k_clusters <- 3
# get clustering result
k_means_result <- kmeans(df_scaled, centers = k_clusters)
# define the number of clusters
k_clusters <- 3
# get clustering result
k_means_result <- kmeans(df_scaled, centers = k_clusters)
k_means_result
# add cluster result to original data
#df$cluster <-
# define the number of clusters
k_clusters <- 3
# get clustering result
k_means_result <- kmeans(df_scaled, centers = k_clusters)
k_means_result
# add cluster result to original data
df$cluster <- k_means_result$cluster
# define the number of clusters
k_clusters <- 3
# get clustering result
k_means_result <- kmeans(df_scaled, centers = k_clusters)
k_means_result
# add cluster result to original data
df$cluster <- as.factor(k_means_result$cluster)
# define the number of clusters
k_clusters <- 3
# get clustering result
k_means_result <- kmeans(df_scaled, centers = k_clusters)
# add cluster result to original data
df$cluster <- as.factor(k_means_result$cluster)
head(df)
# visualize cluster result
qplot(x = df$median_age, y = df$avg_income, label = df$district, geom = "text", color = df$cluster)
# set maximum number of cluster
k_cluster_max <- 10
# iterate through the number of clusters from 1 to 10
k_means_result
# iterate through the number of clusters from 1 to 10
within_sum_of_squares <- sapply(1:k_cluster_max,
function(k){kmeans(df_scaled, centers = k)$tot.withinss})
k_means_result
# iterate through the number of clusters from 1 to 10
within_sum_of_squares <- sapply(1:k_cluster_max,
function(k){kmeans(df_scaled, centers = k)$tot.withinss})
within_sum_of_squares
# iterate through the number of clusters from 1 to 10
within_sum_of_squares <- sapply(1:k_cluster_max,
function(k){
kmeans(df_scaled, centers = k)$tot.withinss})
# visualize the output
plot(1:k_means_result, within_sum_of_squares)
# iterate through the number of clusters from 1 to 10
within_sum_of_squares <- sapply(1:k_cluster_max,
function(k){
kmeans(df_scaled, centers = k)$tot.withinss})
# visualize the output
plot(1:k_means_max, within_sum_of_squares)
# iterate through the number of clusters from 1 to 10
within_sum_of_squares <- sapply(1:k_cluster_max,
function(k){
kmeans(df_scaled, centers = k)$tot.withinss})
# visualize the output
plot(1:k_cluster_max, within_sum_of_squares)
# iterate through the number of clusters from 1 to 10
within_sum_of_squares <- sapply(1:k_cluster_max,
function(k){
kmeans(df_scaled, centers = k)$tot.withinss})
# visualize the output
plot(1:k_cluster_max, within_sum_of_squares, type = "b", pch = "18")
# iterate through the number of clusters from 1 to 10
within_sum_of_squares <- sapply(1:k_cluster_max,
function(k){
kmeans(df_scaled, centers = k)$tot.withinss})
# visualize the output
plot(1:k_cluster_max, within_sum_of_squares, type = "b")
# iterate through the number of clusters from 1 to 10
within_sum_of_squares <- sapply(1:k_cluster_max,
function(k){
kmeans(df_scaled, centers = k)$tot.withinss})
# visualize the output
plot(1:k_cluster_max, within_sum_of_squares, type = "b", pch = "18")
# iterate through the number of clusters from 1 to 10
within_sum_of_squares <- sapply(1:k_cluster_max,
function(k){
kmeans(df_scaled, centers = k)$tot.withinss})
# visualize the output
plot(1:k_cluster_max, within_sum_of_squares, type = "b", frame = FALSE)
# iterate through the number of clusters from 1 to 10
within_sum_of_squares <- sapply(1:k_cluster_max,
function(k){
kmeans(df_scaled, centers = k)$tot.withinss})
# visualize the output
plot(1:k_cluster_max, within_sum_of_squares, type = "b")
# iterate through the number of clusters from 1 to 10
within_sum_of_squares <- sapply(1:k_cluster_max,
function(k){
kmeans(df_scaled, centers = k)$tot.withinss})
# visualize the output
plot(1:k_cluster_max, within_sum_of_squares, type = "b", frame = FALSE)
# iterate through the number of clusters from 1 to 10
within_sum_of_squares <- sapply(1:k_cluster_max,
function(k){
kmeans(df_scaled, centers = k)$tot.withinss})
# visualize the output
plot(1:k_cluster_max, within_sum_of_squares, type = "b")
# iterate through the number of clusters from 1 to 10
within_sum_of_squares <- sapply(1:k_cluster_max,
function(k){
kmeans(df_scaled, centers = k)$tot.withinss})
# visualize the output
plot(1:k_cluster_max, within_sum_of_squares, type = "b",
xlab = "Number of clusters", ylab = "Total within cluster sum of squares")
# conduct clustering with 4 clusters
k_means_result_2 <- kmeans(df_scaled, centers = 4)
# conduct clustering with 4 clusters
k_means_result_2 <- kmeans(df_scaled, centers = 4)
# add result to dataframe
df$cluster <- as.factor(k_means_result_2$cluster)
# visualize cluster result
qplot(x = df$median_age, y = df$avg_income, label = df$district, geom = "text", color = df$cluster)
# conduct clustering with 4 clusters
k_means_result_2 <- kmeans(df_scaled, centers = 4)
# add result to dataframe
df$cluster <- as.factor(k_means_result_2$cluster)
# visualize cluster result
qplot(x = df$median_age, y = df$avg_income, label = df$district, color = df$cluster)
# conduct clustering with 4 clusters
k_means_result_2 <- kmeans(df_scaled, centers = 4)
# add result to dataframe
df$cluster <- as.factor(k_means_result_2$cluster)
# visualize cluster result
qplot(x = df$median_age, y = df$avg_income, label = df$district, color = df$cluster) + geom_text()
# conduct clustering with 4 clusters
k_means_result_2 <- kmeans(df_scaled, centers = 4)
# add result to dataframe
df$cluster <- as.factor(k_means_result_2$cluster)
# visualize cluster result
qplot(x = df$median_age, y = df$avg_income, label = df$district, color = df$cluster) + geom_text_repel()
install.packages("ggrepel")
# conduct clustering with 4 clusters
k_means_result_2 <- kmeans(df_scaled, centers = 4)
# add result to dataframe
df$cluster <- as.factor(k_means_result_2$cluster)
# visualize cluster result
library(ggrepel)
qplot(x = df$median_age, y = df$avg_income, label = df$district, color = df$cluster) + geom_text_repel()
# conduct clustering with 4 clusters
k_means_result_2 <- kmeans(df_scaled, centers = 4)
# add result to dataframe
df$cluster <- as.factor(k_means_result_2$cluster)
# visualize cluster result with ggrepel to avoid label overlapping
library(ggrepel)
qplot(x = df$median_age, y = df$avg_income, label = df$district, color = df$cluster) + geom_text_repel()
# conduct clustering with 4 clusters
k_means_result_2 <- kmeans(df_scaled, centers = 4)
# add result to dataframe
df$cluster <- as.factor(k_means_result_2$cluster)
# visualize cluster result with ggrepel to avoid label overlapping
library(ggrepel)
qplot(x = df$median_age, y = df$avg_income, label = df$district, color = df$cluster,
xlab = "Median Age", ylab = "Average Income") + geom_text_repel()
# conduct clustering with 4 clusters
k_means_result_2 <- kmeans(df_scaled, centers = 4)
# add result to dataframe
df$cluster <- as.factor(k_means_result_2$cluster)
# visualize cluster result with ggrepel to avoid label overlapping
library(ggrepel)
qplot(x = df$median_age, y = df$avg_income, label = df$district, color = df$cluster,
xlab = "Median Age", ylab = "Average Income") + geom_text_repel()
# conduct clustering with 4 clusters
k_means_result_2 <- kmeans(df_scaled, centers = 4)
# add result to dataframe
df$cluster <- as.factor(k_means_result_2$cluster)
# visualize cluster result with ggrepel to avoid label overlapping
library(ggrepel)
qplot(x = df$median_age, y = df$avg_income, label = df$district, color = df$cluster,
xlab = "Median Age", ylab = "Average Income") + geom_text_repel()
# conduct clustering with 4 clusters
k_means_result_2 <- kmeans(df_scaled, centers = 4)
# add result to dataframe
df$cluster <- as.factor(k_means_result_2$cluster)
# visualize cluster result with ggrepel to avoid label overlapping
library(ggrepel)
qplot(x = df$median_age, y = df$avg_income, label = df$district, color = df$cluster,
xlab = "Median Age", ylab = "Average Income") + geom_text_repel()
# visualize cluster result with ggrepel to avoid label overlapping
library(ggrepel)
qplot(x = df$median_age, y = df$avg_income, label = df$district, color = df$cluster,
xlab = "Median Age", ylab = "Average Income") + geom_text_repel()
# check the dimension of data
dim(df)
# check the summary of data
summary(df)
