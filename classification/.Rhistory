data.frame(test$Credit_Application_Result, predict_result_2)
result_lg <- data.frame(test$Credit_Application_Result, predict_result_2)
roc_obj <- roc(test.Credit_Application_Result, predict_result_2, data = result_lg)
roc_obj <- roc(result_lg$test.Credit_Application_Result, result_lg$predict_result_2, data = result_lg)
roc_obj <- roc(test.Credit_Application_Result, predict_result_2, data = result_lg)
roc_obj <- roc(response = test$Credit_Application_Result, predictor = predict_result_2)
roc_obj <- roc(response = test$Credit_Application_Result, predictor = predict_result_2, ordered = TRUE)
predict_result_2
class(predict_result_2)
levels(predict_result_2)
levels(predict_result_2)
levels(test$Credit_Application_Result)
class(predict_result_2)
class(test$Credit_Application_Result)
roc_obj <- roc(response = test$Credit_Application_Result, predictor = factor(predict_result_2))
roc_obj <- roc(response = test$Credit_Application_Result, predictor = predict_result_2)
pre_log_reg_test <- predict(log_reg, newdata = test, type = c("response"))
predict_result_2 <- as.factor(ifelse(pre_log_reg_test > 0.5, "Creditworthy", "Non-Creditworthy"))
predict_result_2 <- factor(predict_result_2, levels = c("Non-Creditworthy", "Creditworthy"))
cm_lr <- confusionMatrix(data = predict_result_2, reference = test$Credit_Application_Result)
cm_lr
roc_obj <- roc(response = test$Credit_Application_Result, predictor = predict_result_2)
roc_obj <- roc(response = train$Credit_Application_Result, predictor = predict_result)
#roc_obj <- roc(response = train$Credit_Application_Result, predictor = predict_result)
auc(cm_lr)
roc_obj <- roc(response = test$Credit_Application_Result, predictor = predict_result_2)
roc_obj <- roc(response = test$Credit_Application_Result, predictor = predict_result_2)
pre_log_reg_test <- predict(log_reg, newdata = test, type = c("response"))
predict_result_2 <- as.factor(ifelse(pre_log_reg_test > 0.5, "Creditworthy", "Non-Creditworthy"))
predict_result_2 <- factor(predict_result_2, levels = c("Non-Creditworthy", "Creditworthy"))
test$Result_Predict <- predict_result_2
cm_lr <- confusionMatrix(data = predict_result_2, reference = test$Credit_Application_Result)
cm_lr
roc_obj <- roc(response = test$Credit_Application_Result, predictor = test$Result_Predict)
roc_obj <- roc(response = Credit_Application_Result, predictor = Result_Predict, data = test)
auc(cm_lr)
roc_obj <- roc(response = Credit_Application_Result, predictor = Result_Predict, data = test)
auc(roc_obj)
#plot(roc_obj, print.auc = TRUE)
levels(predict_result_2)
levels(test$Credit_Application_Result)
roc_obj <- roc(response = Credit_Application_Result, predictor = Result_Predict, data = test)
auc(roc_obj)
#plot(roc_obj, print.auc = TRUE)
roc_obj <- roc(response = Credit_Application_Result, predictor = Result_Predict, data = test)
auc(roc_obj)
plot(roc_obj, print.auc = TRUE)
roc_obj <- roc(response = Credit_Application_Result, predictor = Result_Predict, data = test)
auc(roc_obj)
plot(roc_obj, print.auc = TRUE, lwd = 3)
roc_obj <- roc(response = Credit_Application_Result, predictor = Result_Predict, data = test)
auc(roc_obj)
plot(roc_obj, print.auc = TRUE, lwd = 10)
roc_obj <- roc(response = Credit_Application_Result, predictor = Result_Predict, data = test)
auc(roc_obj)
plot(roc_obj, print.auc = TRUE)
roc_obj <- roc(response = Credit_Application_Result, predictor = Result_Predict, data = test)
auc(roc_obj)
plot(roc_obj, print.auc = TRUE, col = "red")
roc_obj <- roc(response = Credit_Application_Result, predictor = Result_Predict, data = test, plot = TRUE)
auc(roc_obj)
plot(roc_obj, print.auc = TRUE, col = "red")
roc_obj <- roc(response = Credit_Application_Result, predictor = Result_Predict, data = test, plot = TRUE, print.auc = TRUE)
auc(roc_obj)
plot(roc_obj, print.auc = TRUE, col = "red")
roc_obj <- roc(response = Credit_Application_Result, predictor = Result_Predict, data = test, plot = TRUE, print.auc = TRUE)
auc(roc_obj)
plot.roc(roc_obj)
roc_obj <- roc(response = Credit_Application_Result, predictor = Result_Predict, data = test, plot = TRUE, print.auc = TRUE)
auc(roc_obj)
plot.roc(roc_obj,xlim = c(1, 0))
roc_obj <- roc(response = Credit_Application_Result, predictor = Result_Predict, data = test, plot = TRUE, print.auc = TRUE)
auc(roc_obj)
plot.roc(roc_obj, xlim = c(, 1))
roc_obj <- roc(response = Credit_Application_Result, predictor = Result_Predict, data = test, plot = TRUE, print.auc = TRUE)
auc(roc_obj)
plot.roc(roc_obj, xlim = c(0, 1))
roc_obj <- roc(response = Credit_Application_Result, predictor = Result_Predict, data = test, plot = TRUE, print.auc = TRUE)
auc(roc_obj)
plot.roc(roc_obj, xlim = c(1, 0))
roc_obj <- roc(response = Credit_Application_Result, predictor = Result_Predict, data = test, plot = TRUE, print.auc = TRUE)
auc(roc_obj)
plot.roc(roc_obj, xlim = [0,1]
roc_obj <- roc(response = Credit_Application_Result, predictor = Result_Predict, data = test, plot = TRUE, print.auc = TRUE)
auc(roc_obj)
plot.roc(roc_obj, xlim = [1,0]
roc_obj <- roc(response = Credit_Application_Result, predictor = Result_Predict, data = test, plot = TRUE, print.auc = TRUE)
auc(roc_obj)
plot.roc(roc_obj, xlim = c(0,2))
roc_obj <- roc(response = Credit_Application_Result, predictor = Result_Predict, data = test, plot = TRUE, print.auc = TRUE)
auc(roc_obj)
plot.roc(roc_obj, xlim = c(1,0))
roc_obj <- roc(response = Credit_Application_Result, predictor = Result_Predict, data = test, plot = TRUE, print.auc = TRUE)
roc(response = Credit_Application_Result, predictor = Result_Predict, data = test, plot = TRUE, print.auc = TRUE, col = "red")
# Split the data into train and test set
dpart <- createDataPartition(data$Credit_Application_Result, p = 0.75, list = FALSE)
train <- data[dpart, ]
test <- data[-dpart, ]
log_reg <- glm(data = train, Credit_Application_Result ~., family = "binomial")
summary(log_reg)
pre_log_reg <- predict(log_reg, type = c("response"))
predict_result <- ifelse(pre_log_reg > 0.5, "Creditworthy", "Non-Creditworthy")
table(Credit_Application_Result, predict_result)
pre_log_reg_test <- predict(log_reg, newdata = test, type = c("response"))
predict_result_2 <- as.factor(ifelse(pre_log_reg_test > 0.5, "Creditworthy", "Non-Creditworthy"))
predict_result_2 <- factor(predict_result_2, levels = c("Non-Creditworthy", "Creditworthy"))
test$Result_Predict <- predict_result_2
cm_lr <- confusionMatrix(data = predict_result_2, reference = test$Credit_Application_Result)
cm_lr
roc(response = Credit_Application_Result, predictor = Result_Predict, data = test, plot = TRUE, print.auc = TRUE, col = "red")
dt <- rpart(Credit_Application_Result ~ ., data = train)
rpart.plot(dt, type = 4, extra = 2)
dt <- rpart(Credit_Application_Result ~ ., data = train)
rpart.plot(dt, type = 5, extra = 2)
dt <- rpart(Credit_Application_Result ~ ., data = train)
rpart.plot(dt, type = 4, extra = 2)
dt <- rpart(Credit_Application_Result ~ .,
data = train,
method = "class",
control = rpart.control(minsplit = 1, maxdepth = 3, cp = 0),
parms = list(split = "information"))
rpart.plot(dt, type = 4, extra = 2)
dt <- rpart(Credit_Application_Result ~ .,
data = train,
method = "class",
control = rpart.control(minsplit = 1, maxdepth = 3, cp = 0),
parms = list(split = "information"))
rpart.plot(dt, type = 5, extra = 2)
dt <- rpart(Credit_Application_Result ~ .,
data = train,
method = "class",
control = rpart.control(minsplit = 1, maxdepth = 5, cp = 0),
parms = list(split = "information"))
rpart.plot(dt, type = 5, extra = 2)
dt <- rpart(Credit_Application_Result ~ .,
data = train,
method = "class",
control = rpart.control(minsplit = 1, maxdepth = 4, cp = 0),
parms = list(split = "information"))
rpart.plot(dt, type = 5, extra = 2)
plot(varImp(dt))
varImp(dt)
varImp(dt).plot()
varImp(dt)
plot(varImp(dt))
qplot(varImp(dt))
plot(varImp(dt))
# fitting decision tree classification model
DTModel <- train(Credit_Application_Result ~ .,
data = train,
method = "rpart",
metric = "ROC",
parms  = list(split = "gini"),
trControl = trctrl)
# fitting decision tree classification model
DTModel <- train(Credit_Application_Result ~ .,
data = train,
method = "rpart",
metric = "ROC",
parms  = list(split = "gini"))
# fitting decision tree classification model
ggplot2::ggplot(varImp(dt))
# fitting decision tree classification model
ggplot2::ggplot(varImp())
# fitting decision tree classification model
ggplot2::ggplot(varImp())
# fitting decision tree classification model
ggplot2::ggplot(varImp())
# fitting decision tree classification model
ggplot(varImp(dt))
# fitting decision tree classification model
plot(varImp(dt, scale = FALSE))
# fitting decision tree classification model
ggplot2::ggplot(varImp(dt, scale = FALSE))
# fitting decision tree classification model
ggplot(varImp(dt, scale = FALSE))
# fitting decision tree classification model
ggplot(varImp(dt))
# fitting decision tree classification model
varImp(dt)
# fitting decision tree classification model
order(varImp(dt))
# fitting decision tree classification model
sort(varImp(dt))
# fitting decision tree classification model
class(varImp(dt))
# fitting decision tree classification model
(varImp(dt))
# fitting decision tree classification model
arrange((varImp(dt)))
# fitting decision tree classification model
varImp(dt)
# fitting decision tree classification model
var_imp <- varImp(dt)
var_imp[order(var_imp$Overall)]
# fitting decision tree classification model
varImp(dt) %>%
arrange()
# fitting decision tree classification model
varImp(dt) %>%
arrange(desc(Overall))
# fitting decision tree classification model
varImp(dt) %>%
order(desc(Overall))
# fitting decision tree classification model
varImp(dt) %>%
sort(desc(Overall))
# fitting decision tree classification model
varImp(dt) %>%
sort()
# fitting decision tree classification model
varImp(dt) %>%
sort(Overall)
# fitting decision tree classification model
varImp(dt) %>%
sort()
# fitting decision tree classification model
test$Result_Predict <- NULL
glimpse(test)
#predict_dt <- predict(dt, newdata = test)
# fitting decision tree classification model
test$Result_Predict <- NULL
predict_dt <- predict(dt, newdata = test, type = "class")
predict_dt
levels(predict_dt)
test$Result_Predict <- predict_dt
cm_dt <- confusionMatrix(data = predict_dt, reference = test$Credit_Application_Result)
cm_dt
roc(response = Credit_Application_Result, predictor = Result_Predict, data = test, plot = TRUE, print.auc = TRUE, col = "red")
roc_dt <- roc(response = Credit_Application_Result, predictor = Result_Predict, data = test, plot = TRUE, print.auc = TRUE, col = "red")
test$Result_Predict <- predict_dt
cm_dt <- confusionMatrix(data = predict_dt, reference = test$Credit_Application_Result)
cm_dt
roc_dt <- roc(response = Credit_Application_Result, predictor = Result_Predict, data = test, plot = TRUE, print.auc = TRUE, col = "red")
roc_dt <- roc(response = Credit_Application_Result, predictor = Result_Predict, data = test, plot = TRUE, print.auc = TRUE, col = "red")
plot(roc_dt)
roc_lr <- roc(response = Credit_Application_Result, predictor = Result_Predict, data = test, plot = TRUE, print.auc = TRUE, col = "red")
roc_dt <- roc(response = Credit_Application_Result, predictor = Result_Predict, data = test, plot = TRUE, print.auc = TRUE, col = "red")
plot(roc_dt)
roc_dt <- roc(response = test$Credit_Application_Result, predictor = test$Result_Predict, data = test, plot = TRUE, print.auc = TRUE, col = "red")
roc_dt <- roc(response = Credit_Application_Result, predictor = Result_Predict, data = test, plot = TRUE, print.auc = TRUE, col = "red")
plot(roc_dt)
roc_dt <- roc(data = test, response = Credit_Application_Result, predictor = Result_Predict, plot = TRUE, print.auc = TRUE, col = "red")
roc_dt <- roc(response = Credit_Application_Result, predictor = Result_Predict, data = test, plot = TRUE, print.auc = TRUE, col = "red")
plot(roc_dt)
roc_dt <- roc(response = Credit_Application_Result, predictor = Result_Predict, data = test, plot = TRUE, print.auc = TRUE, col = "red")
plot(roc_dt)
install.packages("plotROC")
#roc_dt <- roc(response = Credit_Application_Result, predictor = Result_Predict, data = test, plot = TRUE, print.auc = TRUE, col = "red")
#plot(roc_dt)
library(plotROC)
#roc_dt <- roc(response = Credit_Application_Result, predictor = Result_Predict, data = test, plot = TRUE, print.auc = TRUE, col = "red")
#plot(roc_dt)
library(plotROC)
plotROC::calc_auc(dt)
roc_dt <- roc(test$Credit_Application_Result, test$Result_Predict, plot = TRUE, print.auc = TRUE, col = "red")
as.numeric(test$Credit_Application_Result)
roc_dt <- roc(as.numeric(test$Credit_Application_Result), as.numeric(test$Result_Predict), plot = TRUE, print.auc = TRUE, col = "red")
#plot(roc_dt)
roc_dt <- roc(Credit_Application_Result ~ Result_Predict, test, plot = TRUE, print.auc = TRUE, col = "red")
roc_dt <- roc(Credit_Application_Result ~ Result_Predict, test, plot = TRUE, print.auc = TRUE, col = "red")
roc_dt <- roc(Credit_Application_Result ~ Result_Predict, test, plot = TRUE, print.auc = TRUE, col = "red")
as.numeric(test$Result_Predict )
library(pROC)
data(aSAH)
roc(aSAH$outcome, aSAH$s100b)
roc(outcome ~ s100b, aSAH)
library(pROC)
data(aSAH)
plot(roc(aSAH$outcome, aSAH$s100b))
roc(outcome ~ s100b, aSAH)
library(pROC)
data(aSAH)
plot(roc(aSAH$outcome, aSAH$s100b))
plot(roc(outcome ~ s100b, aSAH))
library(pROC)
data(aSAH)
head(aSAH)
library(pROC)
data(aSAH)
plot(roc(aSAH$outcome, aSAH$s100b))
predict_dt
head(predict_dt)
head(test)
rr <- ifelse(test$Result_Predict == "Creditworthy", 1, 0)
roc_dt <- roc(Credit_Application_Result ~ rr, test, plot = TRUE, print.auc = TRUE, col = "red")
#plot(roc_dt)
roc_dt <- roc(test$Credit_Application_Result, rr, plot = TRUE, print.auc = TRUE, col = "red")
#plot(roc_dt)
roc_dt <- roc(test$Credit_Application_Result, rr, plot = TRUE, print.auc = TRUE, col = "green")
#plot(roc_dt)
roc_dt <- roc(test$Credit_Application_Result, rr, plot = TRUE, print.auc = TRUE, col = "red")
#plot(roc_dt)
roc_dt <- roc(test$Credit_Application_Result, as.numeric(test$Result_Predict), plot = TRUE, print.auc = TRUE, col = "green")
#plot(roc_dt)
roc_dt <- roc(test$Credit_Application_Result, as.numeric(test$Result_Predict), plot = TRUE, print.auc = TRUE, col = "red")
#plot(roc_dt)
roc_dt <- roc(test$Credit_Application_Result, as.numeric(test$Result_Predict), plot = TRUE, print.auc = TRUE, col = "red")
library(tidyverse)
library(corrplot)
library(ggplot2)
library(rpart)
library(rpart.plot)
library(caret)
library(AppliedPredictiveModeling)
library(readxl)
library(pROC)
library(randomForest)
library(tidyverse)
library(corrplot)
library(ggplot2)
library(rpart)
library(rpart.plot)
library(caret)
library(AppliedPredictiveModeling)
library(readxl)
library(pROC)
library(randomForest)
roc_dt <- roc(test$Credit_Application_Result, as.numeric(test$Result_Predict), plot = TRUE, print.auc = TRUE, col = "red")
rf <- randomForest(Credit_Application_Result ~ ., data = train)
test$Result_Predict <- NULL
predict_rf <- predict(rf, newdata = test, type = "class")
test$Result_Predict <- predict_dt
cm_rf <- confusionMatrix(data = predict_rf, reference = test$Credit_Application_Result)
cm_rf
roc_rm <- roc(test$Credit_Application_Result, as.numeric(test$Result_Predict), plot = TRUE, print.auc = TRUE, col = "red")
library(randomForest)
model_randomF <-  randomForest(decision ~ ., data = train, importance = TRUE)
rf <- randomForest(Credit_Application_Result ~ ., data = train, importance = TRUE)
test$Result_Predict <- NULL
predict_rf <- predict(rf, newdata = test, type = "class")
test$Result_Predict <- predict_dt
cm_rf <- confusionMatrix(data = predict_rf, reference = test$Credit_Application_Result)
cm_rf
roc_rm <- roc(test$Credit_Application_Result, as.numeric(test$Result_Predict), plot = TRUE, print.auc = TRUE, col = "red")
pred1=predict(predict_rf,type = "prob")
pred1=predict(rf, newdata = test, type = "prob")
library(ROCR)
perf = prediction(pred1[,2], test$Credit_Application_Result)
# 1. Area under curve
auc = performance(perf, "auc")
auc
# 2. True Positive and Negative Rate
pred3 = performance(perf, "tpr","fpr")
# 3. Plot the ROC curve
plot(pred3,main="ROC Curve for Random Forest",col=2,lwd=2)
abline(a=0,b=1,lwd=2,lty=2,col="gray")
pred1=predict(rf, newdata = test, type = "class")
library(ROCR)
perf = prediction(pred1[,2], test$Credit_Application_Result)
pred1=predict(rf, newdata = test, type = "prob")
library(ROCR)
perf = prediction(pred1[,2], test$Credit_Application_Result)
# 1. Area under curve
auc = performance(perf, "auc")
auc
# 2. True Positive and Negative Rate
pred3 = performance(perf, "tpr","fpr")
# 3. Plot the ROC curve
plot(pred3,main="ROC Curve for Random Forest",col=2,lwd=2)
abline(a=0,b=1,lwd=2,lty=2,col="gray")
pred1=predict(rf, newdata = test, type = "prob")
library(ROCR)
perf = prediction(pred1[,2], test$Credit_Application_Result)
# 1. Area under curve
auc = performance(perf, "auc")
auc
# 2. True Positive and Negative Rate
pred3 = performance(perf, "fpr","tpr")
# 3. Plot the ROC curve
plot(pred3,main="ROC Curve for Random Forest",col=2,lwd=2)
abline(a=0,b=1,lwd=2,lty=2,col="gray")
predict_new <- predict(log_reg, newdata = data2, type = c("response"))
names(data)
data2[, names(data)]
data2[, list(names(data))]
names[data]
names(data)
list(names(data))
class(c("x", "y"))
list(names(data))
class(c("x", "y"))
as.character(names(data))
class(c("x", "y"))
col_names <- as.character(names(data))
predict_new <- predict(log_reg, newdata = data2[, col_names], type = c("response"))
class(c("x", "y"))
col_names <- as.character(names(data))
data2[, col_names]
class(c("x", "y"))
col_names <- as.character(names(data))
names(data2)
names(data) <- gsub(x = names(data), pattern = "-", replacement = "_")
names(data2) <- gsub(x = names(data), pattern = "-", replacement = "_")
class(c("x", "y"))
col_names <- as.character(names(data))
names(data2)
# Load data
data <- read_excel("credit-data-training.xlsx")
data2 <- read_excel(("customers-to-score.xlsx"))
# Check the first few rows
head(data)
names(data) <- gsub(x = names(data), pattern = "-", replacement = "_")
names(data2) <- gsub(x = names(data2), pattern = "-", replacement = "_")
# Remove `Duration-in-Current-address` column
data$Duration_in_Current_address <- NULL
# Mutate missing values for `Age-years`
data <- data %>%
mutate(Age_years =
replace(Age_years,
is.na(Age_years),
median(Age_years, na.rm = TRUE)))
# check if missing values still exist
sum(is.na(data$Age_years))
head(data)
data %>%
keep(is.numeric) %>%
gather() %>%
ggplot(aes(value)) +
facet_wrap(~ key, scales = "free") +
geom_histogram()
data$Foreign_Worker <- NULL
data$Occupation <- NULL
table(data$Credit_Application_Result)
table(data$Account_Balance)
table(data$Payment_Status_of_Previous_Credit)
table(data$Purpose)
table(data$Value_Savings_Stocks)
table(data$Length_of_current_employment)
table(data$Guarantors)
table(data$Concurrent_Credits)
table(data$No_of_Credits_at_this_Bank)
data$Concurrent_Credits <- NULL
glimpse(data)
# change all character columns to factor
data <- as.data.frame(unclass(data))
data$Credit_Application_Result <- factor(data$Credit_Application_Result, levels = c("Non-Creditworthy", "Creditworthy"))
# check the converted data
glimpse(data)
class(c("x", "y"))
col_names <- as.character(names(data))
names(data2)
class(c("x", "y"))
col_names <- as.character(names(data))
data2[, col_names]
class(c("x", "y"))
col_names <- as.character(names(data))
col_names
class(c("x", "y"))
col_names <- as.character(names(data))
col_names <- col_names[2:]
class(c("x", "y"))
col_names <- as.character(names(data))
col_names <- col_names[1:]
class(c("x", "y"))
col_names <- as.character(names(data))
col_names <- col_names(1:)
class(c("x", "y"))
col_names <- as.character(names(data))
class(col_names)
col_names
class(c("x", "y"))
col_names <- as.character(names(data))
class(col_names)
col_names[1:2]
class(c("x", "y"))
col_names <- as.character(names(data))
class(col_names)
col_names[2:]
class(c("x", "y"))
col_names <- as.character(names(data))
class(col_names)
col_names[2:,]
class(c("x", "y"))
col_names <- as.character(names(data))
class(col_names)
col_names[2:]
class(c("x", "y"))
col_names <- as.character(names(data))
length(col_names)
class(c("x", "y"))
col_names <- as.character(names(data))
length(col_names)
col_names <- col_names[2:16]
predict_new <- predict(log_reg, newdata = data2[, col_names], type = c("response"))
sum(predict_new)
predict_new <- ifelse(predict_new > 0.5, 1, 0)
sum(predict_new)
predict_new <- ifelse(predict_new > 0.5, 1, 0)
sum(predict_new)
predict_new <- predict(rf, newdata = data2[, col_names], type = c("response"))
predict_new <- predict(rf, newdata = data2[, col_names], type = c("class"))
class(c("x", "y"))
col_names <- as.character(names(data))
length(col_names)
#col_names <- col_names[2:16]
length(col_names)
predict_new <- predict(rf, newdata = data2[, col_names], type = c("class"))
class(c("x", "y"))
col_names <- as.character(names(data))
length(col_names)
#col_names <- col_names[2:16]
col_names
# Calculate the model accuracy
(228+28) / (228 + 79 + 41 +28)
# Calculate the model overall accuracy
(228+28) / (228 + 79 + 41 +28)
# Calculate the accuracy for Creditworthy
228 / (228 + 41)
str(data2)
predict_new
predict_new == 0
